openapi: 3.0.0
info:
  title: mega_back endpoints documentation
  description: "Routes, requests responses and database operation"
  version: "1.1"
servers:
- url: https://virtserver.swaggerhub.com/VINIDSB580/mega_back/1.1
  description: SwaggerHub API Auto Mocking
- url: http://localhost:3001
paths:

  /adicionarAoCarrinho:
    post:
      summary: Adds a new item to a shopping list and starts a new sale if not exists, returning a sale_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sale_id:
                  type: integer #if not exists receives a sale-id and a client_id and returns an object with all the information abotu a sale  and its items s a null or undefined or an empty string
                client_id:
                  type: integer
                medCode:
                  type: integer
                item_qtd:
                  type: integer
      responses: 
        '200':
          description: returns a success message and a sale_id to be stored in client
          content:
            application/json:
              schema:
                type: object
                properties:
                  sale_id:
                    type: integer
        '500':
          description: server internal error

  /verCarrinho:
    post:
      summary: returns an object with all the information abotu a sale  and its items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sale_id:
                  type: integer
                client_id:
                  type: integer
      responses: 
        '200':
          description: returns a success message and all information about a sale
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  date_time:
                    type: timestamp
                  pay_method:
                    type: string
                  total:
                    type: number
                  shopping_cart:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        medicine_code:
                          type: integer
                        sold_amount:
                          type: integer
                        item_total:
                          type: number
                        approval_status:
                          type: boolean
        '500':
          description: server internal error

  /medicamento:
    get:
      summary: Returns specific data or all data about a procuct, depending on the url fields
      parameters:
        - in: query
          name: fields
          required: false
          schema:
            type: string
          description: >
            - Fields list: id, name, code, category, description, needs_recipe, unit_price, on_stock, manager, image_path, created_at, last_update
            - Values can be separeted by colons or percent-encoded(name, description or name%2ccode)
        - in: query
          name: medCode
          required: false
          schema:
            type: string
          description: "Filters by the required code, wtich is unique for each product"
        - in: query
          name: medName
          required: false
          schema:
            type: string
          description: "Filters by the specified name"
        - in: query
          name: medDescription
          required: false
          schema: 
            type: string
          description: "It is a filter used to get only the products that matches a description"
        - in: query
          name: medCategory
          required: false
          schema:
            type: string
          description: "It is a filter used to get only the produtcs that matches the required category"
        - in: query
          name: medUnitPrice
          required: false
          schema:
            type: number
          description: "Filters by the specified price"
        - in: query
          name: amountOnStock
          required: false
          schema: 
            type: integer
          description: "Filters by the amount on stock"
        - in: query
          name: managerWhoAdded
          required: false
          schema: 
            type: integer
          description: "It filters producs by the id of the manager who added the product"
        - in: query
          name: imagePath
          required: false
          schema: 
            type: string
          description: "It is a filter used to get only the product that matches the required image_path"
        - in: query
          name: needsRecipe
          required: false
          schema: 
            type: boolean
          description: >
            - if not specified it returns both, recipe required and not required
            - else it returns products with required recipe only, or not required only
        - in: query
          name: created_at
          required: false
          schema: 
            type: timestamp
          description: "Filters by the date a product has been added"
        - in: query
          name: last_update
          required: false
          schema: 
            type: timestamp
          description: "Filters by the date a product has been updated"
      responses:
        '200':
          description: >
            - A list of products with its data. It will return all data if no field is specified
            - Ifd fields is specified it returns an an array with objects containeing only the requested data
          content:
            application/json:
              schema:
                type: object
                properties:
                  medicine_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string 
                        name:
                          type: string
                        code:
                          type: string
                        category:
                          type: string
                        description:
                          type: string
                        unit_price:
                          type: number
                        needs_recipe:
                          type: boolean
                        on_stock:
                          type: string
                        manager:
                          type: string
                        image_path:
                          type: string
                        created_at:
                          type: string
                        last_update:
                          type: string
        '404':
          description: Product not found
        '500':
          description: server internal error

  /cadastrarMedicamento:
    post:
      summary: Saves a product on database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                medName:
                  type: string
                medCode:
                  type: number
                medCategory:
                  type: string
                medDescription:
                  type: string
                medUnitPrice:
                  type: number
                amountOnStock:
                  type: number
                managerWhoAdded:
                  type: number #manager id
                imagePath:
                  type: string
                needRecipe:
                  type: boolean
      responses:
        '201':
          description: product has been added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Returns error message like invalid data, invalid sintax etc
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized data, alredy exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: server internal error


  /cadastrarCli:
    post:
      summary: Validate data and register a new client account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                cpf:
                  type: string
                email:
                  type: string
                password:
                  type: string
                passwordRepeat:
                  type: string
                rg:
                  type: string
                address:
                  type: string
                phone:
                  type: string
      responses:
        "201":
          description: client registration created
                
        "400":
          description: some data may be invalid, wrong sintax, characters, size etc
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: registration unauthorized, user data alredy exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: server internal error

  /cadastrarAdm:
    post:
      summary: Validate data and register a manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                passwordRepeat:
                  type: string
      responses:
        "201":
          description: manager registration created
        "400":
          description: some data may be invalid, wrong sintax, characters, size etc
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: unauthorized data, alredy exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: server internal error
  
  /fazerLogin:
    post:
      summary: Checks the credentials and respond with user data if success
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "202":
          description: client login accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_adm:
                    type: boolean
                  email:
                    type: string
                  name:
                    type: string
                  cpf:
                    type: string
                  rg:
                    type: string
                  phone_number:
                    type: number
                  address:
                    type: string
        "209":
          description: manager login accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_adm:
                    type: boolean
                  email:
                    type: string
                  name:
                    type: string
        "400":
          description: "data validation error, not an email, not allowed characters,\
            \ etc"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: incorrect  password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: server internal error
